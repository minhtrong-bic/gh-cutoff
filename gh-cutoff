#!/usr/bin/env bash
# set -eE

#!/bin/bash

TODAY=$(date +%Y%m%d)

owner=""
repo=""
branch=""

# Function to display script usage
function display_usage {
  echo "Usage: gh cutoff -o <owner> -r <repo> -b <branch>"
  echo ""
  echo "Options:"
  echo "  -o owner        Specify the owner of the repository you want to cutoff a branch"
  echo "  -r repo         Specify the repository you want to cutoff a branch"
  echo "  -b branch       Specify the branch you want to cutoff"
  echo ""
  exit 1
}


while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -o)
      owner="$2"
      shift
      shift
      ;;
    -r)
      repo="$2"
      shift
      shift
      ;;
    -b)
      branch="$2"
      shift
      shift
      ;;
    *)
      display_usage
      ;;
  esac
done

# Check if required options are provided
if [[ -z "$owner" ]]; then
  echo "Error: owner name is required"
  display_usage
fi

if [[ -z "$repo" ]]; then
  echo "Error: repo name is required"
  display_usage
fi

if [[ -z "$branch" ]]; then
  echo "Error: branch name is required"
  display_usage
fi

# function openProtectedBranchRule {
#   echo -e "\n===> Open protection rule to protected branches \n"
#   for branchName in "${CUTOFF_BRANCHES[@]}"; do
#     gh api -X PATCH repos/$owner/$repo/branches/$branchName/protection \
#     --input <(cat <<EOF
#     {
#       "required_status_checks": {
#         "strict": true,
#         "contexts": []
#       },
#       "enforce_admins": true,
#       "required_pull_request_reviews": {
#         "dismissal_restrictions": {},
#         "dismiss_stale_reviews": true,
#         "require_code_owner_reviews": true,
#         "required_approving_review_count": 1
#       },
#       "restrictions": null,
#       "required_linear_history": false,
#       "allow_force_pushes": false,
#       "allow_deletions": false,
#       "block_creations": false,
#       "required_conversation_resolution": true,
#       "lock_branch": false,
#       "allow_fork_syncing": false
#     }
# EOF
#   )
#   done
# }

# function recoveryProtectedBranchRule {
#   echo -e "\n===> Recovery protection rule to protected branches \n"
#   for branchName in "${CUTOFF_BRANCHES[@]}"; do
#     gh api -X PATCH repos/$owner/$repo/branches/$branchName/protection \
#     --input <(cat <<EOF
#     {
#       "required_status_checks": {
#         "strict": true,
#         "contexts": []
#       },
#       "enforce_admins": true,
#       "required_pull_request_reviews": {
#         "dismissal_restrictions": {},
#         "dismiss_stale_reviews": true,
#         "require_code_owner_reviews": true,
#         "required_approving_review_count": 1
#       },
#       "restrictions": null,
#       "required_linear_history": false,
#       "allow_force_pushes": false,
#       "allow_deletions": false,
#       "block_creations": false,
#       "required_conversation_resolution": true,
#       "lock_branch": false,
#       "allow_fork_syncing": false
#     }
# EOF
#   )
#   done
# }


function array_contains {
  local search="$1"
  shift
  local arr=("$@")
  for elem in "${arr[@]}"; do
    if [ "$elem" == "$search" ]; then
      return 0
    fi
  done
  return 1
}

function cutoff {
	echo -e "\n===> execute command cutoff branches on $repo\n"
  
  echo -e "- backup branch: $branch\n"

  RESPONSE=$(gh api /repos/$owner/$repo/branches/$branch/rename \
    --method POST \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    -f new_name="$branch-$TODAY")


  COMMIT=$((gh api /repos/$owner/$repo/branches/master \
      -H "Accept: application/vnd.github+json" \
      -H "X-GitHub-Api-Version: 2022-11-28" ) | jq -r .commit.sha)

	echo -e "- create new branch: $branch from $COMMIT"  
  RESPONSE=$(gh api /repos/$owner/$repo/git/refs \
    --method POST \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    -f ref="refs/heads/$branch" \
    -f sha="$COMMIT")
}

# openProtectedBranchRule
cutoff
# recoveryProtectedBranchRule



echo -e "===> Done"
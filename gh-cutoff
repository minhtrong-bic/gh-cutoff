#!/usr/bin/env bash
# set -eE

#!/bin/bash

TODAY=$(date +%Y%m%d)

owner=""
repo=""
branch=""

# Function to display script usage
function display_usage {
  echo "Usage: gh cutoff -o <owner> -r <repo> -b <branch>"
  echo ""
  echo "Options:"
  echo "  -o owner        Specify the owner of the repository you want to cutoff a branch"
  echo "  -r repo         Specify the repository you want to cutoff a branch"
  echo "  -b branch       Specify the branch you want to cutoff"
  echo ""
  exit 1
}


while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -o)
      owner="$2"
      shift
      shift
      ;;
    -r)
      repo="$2"
      shift
      shift
      ;;
    -b)
      branch="$2"
      shift
      shift
      ;;
    *)
      display_usage
      ;;
  esac
done

# Check if required options are provided
if [[ -z "$owner" ]]; then
  echo "Error: owner name is required"
  display_usage
fi

if [[ -z "$repo" ]]; then
  echo "Error: repo name is required"
  display_usage
fi

if [[ -z "$branch" ]]; then
  echo "Error: branch name is required"
  display_usage
fi

function openProtectedBranchRule {
  echo -e "\n===> Open protection rule to protected branches \n"

  JSON_DATA='{
    "required_status_checks": {
      "strict": true,
      "contexts": []
    },
    "enforce_admins": true,
    "required_pull_request_reviews": null,
    "restrictions": {
      "users": [],
      "teams": [],
      "apps": []
    },
    "required_linear_history": false,
    "allow_force_pushes": true,
    "allow_deletions": false,
    "block_creations": false,
    "required_conversation_resolution": true,
    "lock_branch": false,
    "allow_fork_syncing": false
  }'

  echo "$JSON_DATA" > cutoff_protection_payload.json

  RESPONSE=$(gh api -X PUT "repos/$owner/$repo/branches/$branch/protection" \
    --input cutoff_protection_payload.json
  )

  # Remove the temporary JSON payload file
  rm cutoff_protection_payload.json

}

function recoveryProtectedBranchRule {
  echo -e "\n===> Recovery protection rule to protected branches \n"
  JSON_DATA='{
    "required_status_checks": {
      "strict": true,
      "contexts": []
    },
    "enforce_admins": true,
    "required_pull_request_reviews": {
      "dismissal_restrictions": {},
      "dismiss_stale_reviews": true,
      "require_code_owner_reviews": false,
      "required_approving_review_count": 1,
      "require_last_push_approval": false,
      "bypass_pull_request_allowances": {}
    },
    "restrictions": {
      "users": [],
      "teams": [],
      "apps": []
    },
    "required_linear_history": false,
    "allow_force_pushes": false,
    "allow_deletions": false,
    "block_creations": false,
    "required_conversation_resolution": true,
    "lock_branch": false,
    "allow_fork_syncing": false
  }'

  echo "$JSON_DATA" > cutoff_protection_payload.json

  RESPONSE=$(gh api -X PUT "repos/$owner/$repo/branches/$branch/protection" \
    --input cutoff_protection_payload.json
  )

  # Remove the temporary JSON payload file
  rm cutoff_protection_payload.json
}

function cutoff {
	echo -e "\n===> execute command cutoff branches on $repo\n"
  
  echo -e "- backup branch: $branch\n"
  git checkout $branch
  git pull origin $branch
  git checkout -b $branch-$TODAY
  git push origin $branch-$TODAY

  echo -e "- create new branch: $branch"
  git checkout master
  git branch -D $branch
  git pull origin master
  git checkout -b $branch
  git push origin -f $branch 

}

openProtectedBranchRule
cutoff
recoveryProtectedBranchRule



echo -e "===> Done"